import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import xml.etree.ElementTree as ET
import random

xml_file = '/Users/charliewilkinson/Desktop/Exeter/Nature Inspired/brazil58.xml' # change path to your xml file


def get_root(xml_file):
    '''
    Parse through given xml file to obtain the root

    Parameters:
    - xml_file:  the xml file

    Returns:
    
    element: Root of the file
    '''
    return ET.parse(xml_file).getroot()

def generate_cost_data(root):
    '''
    Extract the raw data to create a dicitionary containing the information of all the possible costs from travelling from city i to city j
            
    Parameters:        
    - root: the root of the xml file

    Returns:

    node_cost(dict) : Cities as key, list of all other cities to travel to as value
    '''
    node_cost = {}
    city_id = 0

    for vertex in root.find('graph').findall('vertex'):
        city_connections = {}

        for edge in vertex[0:]:
            to_other_city = int(edge.text)
            cost = float(edge.get('cost'))
            city_connections[to_other_city] = cost

        node_cost[city_id] = city_connections
        city_id += 1

    return node_cost


root = get_root(xml_file)
node_cost = generate_cost_data(root)


# Get the maximum number of nodes (keys) in the dictionary
num_nodes = max(node_cost.keys()) + 1

# Create an empty matrix with dimensions num_nodes x num_nodes
matrix = [[0.0 for _ in range(num_nodes)] for _ in range(num_nodes)]

# Fill in the matrix using the dictionary values
for i in range(num_nodes):
    for j in range(num_nodes):
        if j in node_cost[i]:
            matrix[i][j] = node_cost[i][j]

# Print the resulting matrix
matrix = np.array(matrix)

results_log = [] # to store results

def ant_colony_optimization(points, n_ants, n_iterations, alpha, beta, evaporation_rate, Q):
    '''

    Parameters
    ------------
    points: list
        city x, y coordinates

    n_ants: int
        Number of ants included in colony

    n_iterations: int
        Number of iterations to run

    alpha: float
        weight on pheromones - higher emphasizes importance of pheromones
       
    beta: float
        weight on heuristic (distance, cost) - higher increase reliance of this info on ant decision making
        

    evaperation rate: float
        rate of pheromone evaporation

    Q: Float
        Amount of pheromone deposited - higher the Q, more substantial increase in pheromone levels on nodes visited


    Returns
    --------
    '''

    n_points = points.shape[0] 
    pheromone = np.ones((n_points, n_points))  # Inital array of pheromones - all set as one
    best_path = None
    best_path_length = np.inf                  
    
    for iteration in range(n_iterations):
        paths = []
        path_lengths = []
        
        for ant in range(n_ants):
            visited = [False]*n_points
            current_point = np.random.randint(n_points)     # Set initial point randomly
            visited[current_point] = True                   # Visited city tracker
            path = [current_point]
            path_length = 0
            #print(current_point)
            while False in visited:        # Check all cities
                unvisited = np.where(np.logical_not(visited))[0]      # Unvisted city array
                probabilities = np.zeros(len(unvisited))              # Empty probability list of traversing to each unvisited city
                # Calculate the probabilites of traveling to each city
                for i, unvisited_point in enumerate(unvisited):
                    # Transition rule
                    probabilities[i] = pheromone[current_point, unvisited_point]**alpha / points[current_point, unvisited_point]**beta
                                    
                probabilities /= np.sum(probabilities)
                
                next_point = np.random.choice(unvisited, p=probabilities) # Randomly select next city using the probabilities
                path.append(next_point)
                path_length += points[current_point,next_point]
                visited[next_point] = True
                current_point = next_point
            
            # Return to start city
            path.append(path[0])
            path_length += points[path[0],path[-1]]
            # Store path and length
            paths.append(path)
            path_lengths.append(path_length)
            
            # Update best path 
            if path_length < best_path_length:
                best_path = path
                best_path_length = path_length
        
        pheromone *= evaporation_rate    # Update current pheromones
        
        # Calculate new pheromomnes
        for path, path_length in zip(paths, path_lengths): 
            for i in range(n_points-1):
                pheromone[path[i], path[i+1]] += Q/path_length  # Update pheromones on each city to city path
            pheromone[path[-1], path[0]] += Q/path_length       # Update pheromones on each city to city path
        return best_path, best_path_length


# Example usage:
n_ants = 100
n_iterations = 50000
alpha = 1
beta = 4
evaporation_rate = 0.2
Q = 1

for _ in range(5):
    results = pd.DataFrame()
    path, path_length  = ant_colony_optimization(matrix, n_ants=n_ants, n_iterations=n_iterations, alpha=alpha, beta=beta, evaporation_rate=evaporation_rate, Q=Q)

    # Create a dictionary with the collected data
    entry = {
        '# ants': n_ants,
        '# Iterations': n_iterations,
        'alpha': alpha,
        'beta': beta,
        'Evaporation Rate': evaporation_rate,
        'Q': Q,
        'Path': [path],
        'Path Length': [path_length]
    }

    # Append the entry to the list
    results_log.append(entry)

    # Concatenate the list of dictionaries into a DataFrame
    results = pd.concat([pd.DataFrame.from_dict(d) for d in results_log], ignore_index=True)
